apiVersion: v1
kind: ConfigMap
metadata:
    name: webhook-script
    namespace: audit-logs
data:
    app.py: |
        from http.server import BaseHTTPRequestHandler, HTTPServer
        import json
        import gzip
        from io import BytesIO
        import logging
        import sys

        # ログ設定：stdoutに即時出力
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(levelname)s] %(message)s",
            handlers=[logging.StreamHandler(sys.stdout)]
        )

        logger = logging.getLogger(__name__)

        class SimpleHandler(BaseHTTPRequestHandler):
            def _set_headers(self, code=200):
                self.send_response(code)
                self.send_header('Content-type', 'application/json')
                self.end_headers()

            def do_GET(self):
                self._set_headers()
                response = {'message': 'Hello from GET'}
                self.wfile.write(json.dumps(response).encode())
                logger.info("GET request received from %s", self.client_address[0])

            def do_POST(self):
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)

                logger.info("===== POSTリクエスト受信 =====")
                if self.headers.get('Content-Encoding') == 'gzip':
                    try:
                        buf = BytesIO(post_data)
                        f = gzip.GzipFile(fileobj=buf)
                        decompressed = f.read().decode('utf-8')
                        logger.info("[gzip解凍成功] 内容:\n%s", decompressed)
                    except Exception as e:
                        logger.warning("[gzipの展開に失敗] %s", e)
                else:
                    try:
                        logger.info("[UTF-8] 内容:\n%s", post_data.decode('utf-8'))
                    except UnicodeDecodeError:
                        logger.warning("[非UTF-8データ] 生データ: %s", post_data)

                self._set_headers()
                response = {'message': 'POST received'}
                self.wfile.write(json.dumps(response).encode())
                logger.info("POST response sent to %s", self.client_address[0])

        def run(server_class=HTTPServer, handler_class=SimpleHandler, port=8080):
            server_address = ('', port)
            httpd = server_class(server_address, handler_class)
            logger.info("📡 Webhookサーバ起動ポート: %d", port)
            httpd.serve_forever()

        if __name__ == '__main__':
            run()
