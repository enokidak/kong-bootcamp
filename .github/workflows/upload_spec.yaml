name: Upload API Spec to Konnect / Dev Portal

on:
  # If you want to upload spec before testing or deploying it,
  # uncomment the followings.
  #
  #push:
  #  paths:
  #    - docs/openapi/api-spec.yaml
  workflow_run:
    # Run after deploy_oas.yaml
    workflows: ["Convert OpenAPI Spec to Kong and Deploy"]
    types:
      - completed
  workflow_dispatch:

env:
  REGIONAL_EP: "https://${{ vars.KONNECT_REGION }}.api.konghq.com/v2"
  AUTH_HEADER: "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}"
  PRODUCT_NAME: "${{ vars.PRODUCT_NAME }}"
  VERSION_NAME: "${{ vars.VERSION_NAME }}"

jobs:
  upload-spec:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/enokidak/kong-bootcamp/konnect-apiops
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Upload api-spec.yaml
        shell: bash
        run: |
          file="docs/openapi/api-spec.yaml"
          msg="Document '$file' has been successfully uploaded."
          return_code=0
          set -x
          echo "Detected changes in $file"

          # Get Product ID from PRODUCT_NAME.
          PRODUCT_ID=$(curl -X GET -s \
                         ${REGIONAL_EP}/api-products \
                         -H "${AUTH_HEADER}" \
                       | jq -r '.data[] | select(.name == "'"$PRODUCT_NAME"'") | .id' || true)

          if [ "$(echo $PRODUCT_ID | wc -w)" -ne 1 ]; then
              echo "[Error] Failed to obtain PRODUCT_ID or obtained multiple PRODUCT_NAME: $PRODUCT_NAME, PRODUCT_IDs: $PRODUCT_ID"
              exit 1
          fi
          # Get version ID from VERSION_NAME.
          VERSION_ID=$(curl -X GET -s \
              ${REGIONAL_EP}/api-products/${PRODUCT_ID}/product-versions \
              -H "${AUTH_HEADER}" \
              | jq -r '.data[] | select(.name == "'"$VERSION_NAME"'") | .id' || true)
          if [ -z "$VERSION_ID" ]; then
              echo "[Error] Failed to get Version ID."
              exit 1
          fi
          # Remove path.
          filename=$(basename "$file")

          SPEC_ID=$(curl -s -X GET \
              ${REGIONAL_EP}/api-products/${PRODUCT_ID}/product-versions/${VERSION_ID}/specifications \
              -H "${AUTH_HEADER}" \
              | jq -r --arg filename "$filename" '.data[] | select(.name == $filename) | .id' || true)

          # Encode the file contents in base64
          CONTENT=$(base64 -w0 "$file")

          if [ -z "$SPEC_ID" ]; then
              # If no specification exists, create a new one
              action=create
              curl_response=$(curl -w "\n%{http_code}" -X POST \
                  ${REGIONAL_EP}/api-products/${PRODUCT_ID}/product-versions/${VERSION_ID}/specifications \
                  -H "Content-Type: application/json" \
                  -H "${AUTH_HEADER}" \
                  -d '{
                  "name": "'"$filename"'",
                  "content": "'"$CONTENT"'"
                  }')
          else
              # If the specification exists, update it
              action=update
              curl_response=$(curl -w "\n%{http_code}" -X PATCH \
                  ${REGIONAL_EP}/api-products/${PRODUCT_ID}/product-versions/${VERSION_ID}/specifications/${SPEC_ID} \
                  -H "Content-Type: application/json" \
                  -H "${AUTH_HEADER}" \
                  -d '{
                  "content": "'"$CONTENT"'"
                  }')
          fi

          http_code=$(echo "$curl_response" | tail -n 1)
          # Check if the curl command succeeded
          if [[ "$http_code" -lt 200 || "$http_code" -ge 300 ]]; then
              msg="Failed to $action specification. (err: $curl_response)"
              return_code=1
          fi
          echo ""
          echo "---"
          echo "Status Code: $http_code"
          echo $msg
          echo "---"
          exit $return_code
