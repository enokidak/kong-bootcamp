name: Build and Push Kong Image

on:
  push:
    paths:
      - kong-gateway/Dockerfile
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        platform:
          - linux/arm64
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set image tag (Commit ID or Tag name)
        id: tag
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build Kong Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/kong-gateway:${{ env.IMAGE_TAG }} \
            --file kong-gateway/Dockerfile kong-gateway

      - name: Push Kong Image
        run: |
          docker push ghcr.io/${{ github.repository }}/kong-gateway:${{ env.IMAGE_TAG }}

      # - name: Save image tag
      #   run: echo "${{ env.IMAGE_TAG }}" > image_tag.txt

      # - name: Upload image tag
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: image_tag
      #     path: image_tag.txt

      - name: Get latest semantic version tag
        id: get_latest_tag
        run: |
          tags=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/kong-gateway/tags/list" | jq -r '.tags[]')
          latest=$(echo "$tags" | grep -E '^3\.10\.0\.[0-9]+$' | sort -V | tail -n1)
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV
          echo "Latest tag: $latest"

      - name: Calculate next version
        id: next_version
        run: |
          LATEST_TAG="${{ env.LATEST_TAG }}"
          if [[ -z "$LATEST_TAG" ]]; then
            echo "No previous tag found, this should not happen."
            exit 1
          fi
          BASE="3.10.0"
          PATCH2=$(echo $LATEST_TAG | awk -F. '{print $4}')
          NEXT_PATCH2=$((PATCH2+1))
          NEXT_VERSION="${BASE}.${NEXT_PATCH2}"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "Next version: $NEXT_VERSION"

      - name: Scan image using Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/kong-gateway:${{ env.IMAGE_TAG }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          output: "trivy-scan-results.txt"

      - name: Upload scan results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-scan-results.txt

      - name: Tag as latest and push
        if: ${{ success() && steps.trivy.outcome == 'success' }}
        run: |
          docker tag ghcr.io/${{ github.repository }}/kong-gateway:${{ env.IMAGE_TAG }} ghcr.io/${{ github.repository }}/kong-gateway:${{ env.NEXT_VERSION }}
          docker push ghcr.io/${{ github.repository }}/kong-gateway:${{ env.NEXT_VERSION }}
          docker tag ghcr.io/${{ github.repository }}/kong-gateway:${{ env.IMAGE_TAG }} ghcr.io/${{ github.repository }}/kong-gateway:latest
          docker push ghcr.io/${{ github.repository }}/kong-gateway:latest
